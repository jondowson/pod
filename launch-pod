#!/bin/bash

# script_name:   launch-pod.sh
# author:        jondowson
# about:         launch a chosen pod with passed in flags

# ------------------------------------------

## uncomment to see full bash trace (debug)

# set -x

# ------------------------------------------

## timer for script duration
pod_start=$(date +%s)

# ------------------------------------------

## discover pod system path and source generic scripts

parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
cd "${parent_path}"
pod_home_path="$(pwd)"

# ------------------------------------------

## preparation: call in order

# source generic preperation script
source pods/pod_/prepare/prepare_generic_misc.sh
# identify local os
prepare_generic_misc_identifyOs

# source all generic pod_ scripts
prepare_generic_misc_sourceGeneric
# set pod defaults
prepare_generic_misc_setDefaults

# ------------------------------------------

## define pod dependency paths

# Mac will directly use the brew installed version of jq
if [[ "${os}" == "Mac" ]]; then
  jq_folder=""
  jq_file_path="jq"
# Other linux need the path to the included jq binary
else
  jq_folder="${pod_home_path}/third_party/jq-linux64/"
  jq_file_path="${jq_folder}jq"
  lib_generic_misc_fileExistsCheckAbort "${jq_file_path}"
fi

# ------------------------------------------

## handle flags

# ensure --pod | -p flag is passed first if not using help flag
if [[ "${1}" != "-p" ]] && [[ "${1}" != "--pod" ]] && [[ "${1}" != "-h" ]] && [[ "${1}" != "--help" ]]; then
  printf "%s\n"
  lib_generic_display_msgColourSimple "error" "always specify the pod flag first ${yellow}-p | --pod${red}"
  printf "%s\n"
  exit 1;
fi

# -----

# use the flag handling function for the choosen pod
while test $# -gt 0; do
  case "$1" in
    -h|--help)
        lib_generic_display_banner
        lib_generic_help_pod
        exit 0 ;;
    -p|--pod)
        shift
        WHICH_POD=$1
        shift
        prepare_generic_misc_sourceThisPod
        prepare_misc_setDefaults
        podFlag="true"
        ;;
    *)
      thisFlag=${1}
      flagValue=$(shift && echo $1)
      prepare_handleFlags ${thisFlag} ${flagValue}
      shift
      shift
        ;;
  esac
done

# -----

# ensure flags have been passed correctly for this pod
prepare_flagRules

# ------------------------------------------

## all pod apps make use of a servers json definition file - check it exists

servers_json_path="${pod_home_path}/pods/${WHICH_POD}/servers/${SERVERS_JSON}"
lib_generic_misc_fileExistsCheckAbort "${servers_json_path}"
numberOfServers=$(${jq_folder}jq [.] ${servers_json_path} | tr '"' '\n' | grep 'server_' | wc -l)

# ------------------------------------------

## source the specified pod's build folder

prepare_generic_misc_sourceThisPodBuild

# ------------------------------------------

## source the specified pod's init script and run that pod

source "pods/${WHICH_POD}/${WHICH_POD}.sh"
"${WHICH_POD}"

# ------------------------------------------

## closing messages

lib_generic_display_finalMessage "${WHICH_POD}"
lib_generic_misc_timePod
lib_generic_display_msgColourSimple "info" "pod took: ${diff}[s]"
printf "%s\n"
