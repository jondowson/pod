#!/usr/local/bin/bash

POD_VERSION="1.5.4"
script_name="podMac"
script_author="JRD"
script_about="launch a chosen pod with passed flags - mac version"
script_start=$(date +%s)
podInput=$@

# ////////////////////////////////////////// DISCOVER PATHS


## [1] discover pod path and assign TARGET_FOLDER

# [1.1] discover pod path
parentPath=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; cd ..; pwd -P )
cd "${parentPath}"
podHomePath="$(pwd)"

# [1.2] establish TARGET_FOLDER on this machine running pod (parent folder to POD_SOFTWARE)

LOCAL_TARGET_FOLDER=$(printf $parentPath | sed 's,POD_SOFTWARE.*,,')
TARGET_FOLDER="${LOCAL_TARGET_FOLDER}"


# ////////////////////////////////////////// GENERIC PREPERATION (pod_)


## [2] generic pod_ preparation

# [2.1] source generic pod_ preperation script
source pods/pod_/prepare/GENERIC_prepare_misc.bash
# [2.2] remove any existing temp files
GENERIC_prepare_misc_clearTheDecks
# [2.3] identify local os
GENERIC_prepare_misc_identifyOs
# [2.4] source all generic pod_ scripts
GENERIC_prepare_misc_sourceGeneric
# [2.5] set all generic pod_ default settings
GENERIC_prepare_defaults_set
# [2.6] change local permissions to assist later pod folder copy
chmod -R 777 ${podHomePath}/.git
# [2.7] declare global arrays used by generic pod_ stages / functions
declare -A ifsDelimArray
declare -A pod_arrayTestConnect
declare -A pod_software_send_pid_array
# [2.8] set some handy generic flags
flagOne="false"
flagTwo="false"

# ==========

## [3] check generic pod_ dependencies

# [3.1] jq - bash jason parser - on mac uses homebrew package
jqFolderPath=""
jqFilePath="jq"
# [3.2] ensure third party packages are executable
chmod -R 777 "${podHomePath}/third_party/"

# ==========

## [4] handle flags passed on command line

# [4.1] ensure --pod | -p flag is passed first (if not using help flag on its own)
if [[ "${1}" != "-p" ]] && [[ "${1}" != "--pod" ]] && [[ "${1}" != "-h" ]] && [[ "${1}" != "--help" ]]; then
  printf "%s\n"
  GENERIC_prepare_display_msgColourSimple "ERROR-->" "always specify the pod flag first ${yellow}-p | --pod${red}"
  printf "%s\n"
  exit 1;
fi


# ////////////////////////////////////////// POD SPECIFIC PREPERATION (pod_XYZ)


# [4.2] use the flag handling function for the chosen pod
while test $# -gt 0; do
  case "$1" in
    -h|--help)
        if [[ ${podFlag} == "true" ]]; then
          GENERIC_prepare_display_banner
          GENERIC_prepare_help
          prepare_help
          GENERIC_prepare_helpLists
        else
          GENERIC_prepare_display_banner
          GENERIC_prepare_help
          GENERIC_prepare_helpLists
        fi
        exit 0;
        ;;
    -p|--pod)
        shift
        WHICH_POD=$1
        shift
        GENERIC_prepare_misc_sourceThisPod
        prepare_defaults_set
        GENERIC_prepare_misc_clearTheDecks
        podFlag="true"
        ;;
    *)
      thisFlag=${1}
      flagValue=$(shift && echo $1)
      prepare_flags_handle ${thisFlag} ${flagValue}
      shift
      shift
        ;;
  esac
done

# [4.3] ensure flags have been passed correctly for this pod
# this will call the version of this function for the chosen pod
prepare_flags_rules

# ==========

## [5] handle the user specified servers json definition file

# note: a server definition file must always be specified !

# [5.1] check it is valid
serversJsonPath="${podHomePath}/servers/${SERVERS_JSON}"
GENERIC_lib_checks_fileExists "launch-pod#5.1.1" "true" "${serversJsonPath}"
catchError "launch-pod#5.1.2" "jq error on server json" "true" "false" "jq keys ${serversJsonPath}"

# [5.2] check at least one server is defined
numberOfServers=$(jq -r keys $serversJsonPath | grep 'server_' | wc -l)
GENERIC_lib_checks_freeTest "launch-pod#5.2.1" "zero number of servers" "$numberOfServers" "-eq" "0"

# ==========

## [6] source the specified pods build folder

# note: a build definition file must always be specified !

GENERIC_prepare_misc_sourceThisPodBuild

# ==========

## [7] create tmp folder - this holds a copy of pod that can be edited and distributed to the servers

# [7.1] create configurable temporary version of pod
GENERIC_prepare_misc_podBuildTempFolder

# ==========

## [8] globally declare arrays used by generic stages

declare -A arrayJson                  # all stages - assign json key values to bash variables
declare -A arrayTestConnect           # GENERIC_stages_testConnectivity   - for passwordless connectivity
declare -A arrayTestWrite1            # GENERIC_stages_testWritePaths     - for paths specified in build_settings
declare -A arrayTestWrite2            # GENERIC_stages_testWritePaths     - for paths specified in json
declare -A arraySendPodPids           # GENERIC_stages_sendPodSoftware    - for send POD_SOFTWARE folder to server(s)
declare -a arrayBuildLocalFunctions   # GENERIC_stages_buildSend          - for functions performed locally (not on remote server)
declare -A arrayBuildSend             # GENERIC_stages_buildSend          - for send bespoke pod to server(s)
declare -a arrayBuildSendData         # GENERIC_stages_buildSend          - for handle data paths specified in json
declare -A arrayLaunchPodPids         # GENERIC_stages_launchPodRemotely  - for launching script on remote server(s)

# ==========

## [9] pod specific checks and call

# [9.1] test pod specific required files/folders exist
prepare_misc_checkFileFolderExist

# [9.2] source the pod's init script
source "pods/${WHICH_POD}/${WHICH_POD}.bash"

# [9.3] call the pod's init function
"${WHICH_POD}"


# ////////////////////////////////////////// GENERIC POD FINISH


## [10] display generic pod_ + pod specific closing messages

# [10.1] display final message for this pod
${WHICH_POD}_finalMessage

# [10.2] tidy up temporary files
GENERIC_prepare_misc_clearTheDecks

# [10.3] calculate and display script timings
GENERIC_lib_misc_timePod
printf "%s\n"
GENERIC_prepare_display_msgColourSimple "INFO" "pod took: ${diff}[s]"
printf "%s\n"
