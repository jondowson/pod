#!/bin/bash

# script_name:   launch-pod.sh
# author:        jondowson
# about:         launch a chosen pod with passed in flags

# ------------------------------------------

## uncomment to see full bash trace (debug)

# set -x

# ------------------------------------------

## timer for script duration
pod_start=$(date +%s)

# ------------------------------------------

## discover pod system path and source generic scripts

parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
cd "${parent_path}"
pod_home_path="$(pwd)"

# ------------------------------------------

## preparation: call in order

# source generic preperation script
source lib/pod_generic/pod_generic_preperation.sh
# identify local os
pod_generic_preperation_identifyOs
# source all other generic, non pod specific, lib scripts
pod_generic_preperation_sourceGenericLib

# ------------------------------------------

## define pod dependency paths

# Mac will directly use the brew installed version of jq
if [[ "${os}" == "Mac" ]]; then
  jq_folder=""
  jq_file_path="jq"
# Other linux need the path to the included jq binary
else
  jq_folder="${pod_home_path}/third_party/jq-linux64/"
  jq_file_path="${jq_folder}jq"
fi

# ------------------------------------------

## handle flags

# ensure pod flag is passed first
if [[ "${1}" != "-p" ]] && [[ "${1}" != "--pod" ]] && [[ "${1}" != "-h" ]] && [[ "${1}" != "--help" ]]; then
  printf "%s\n"
  pod_generic_display_msgColourSimple "error" "always specify the pod flag first ${yellow}-p | --pod${red}"
  printf "%s\n"
  exit 1;
fi

# -----

while test $# -gt 0; do
  case "$1" in
    -h|--help)
        pod_generic_display_banner
        pod_generic_help_pod
        exit 0 ;;
    -p|--pod)
        shift
        WHICH_POD=$1
        pod_generic_defaults
        shift
        podFlag="true"
        ;;
    -s|--servers)
        shift
        SERVERS_JSON=$1
        shift
        serversFlag="true"
        ;;
    -b|--build)
        shift
        BUILD_FOLDER=$1
        shift
        buildFlag="true"
        ;;
    -ss|--sendsoft)
        shift
        SEND_DSE_SOFTWARE=$1
        shift
        sendsoftFlag="true"
        ;;
    -rr|--regenresources)
        shift
        REGENERATE_RESOURCES=$1
        shift
        regenresourcesFlag="true"
        ;;
    -cs|--clusterstate)
        shift
        CLUSTER_STATE=$1
        shift
        clusterstateFlag="true"
        ;;
    *)
      printf "%s\n"
      pod_generic_display_msgColourSimple "error" "Not a recognised flag ${yellow}${1}${red}"
      printf "%s\n"
      exit 1;
        ;;
  esac
done

# -----

# ensure flags have been passed correctly
pod_generic_preperation_flagRules

# ------------------------------------------

## for this specific pod source all scripts from the lib and stages folders

pod_generic_preperation_sourcePodLib
pod_generic_preperation_sourcePodStages

# ------------------------------------------

## for pods that make use of them - source all build scripts for this pod
if [[ ${USE_BUILDS} == "true" ]]; then
  pod_generic_preperation_sourcePodBuilds
fi

# ------------------------------------------

## all pod apps make use of a servers json definition file - check it exists

servers_json_path="${pod_home_path}/servers/${SERVERS_JSON}"
pod_generic_misc_fileExistsCheckAbort ${servers_json_path}
numberOfServers=$(${jq_folder}jq [.] ${servers_json_path} | tr '"' '\n' | grep 'server_' | wc -l)

# ------------------------------------------

## source the specified pod's init script and run that pod

source pods/"${WHICH_POD}".sh
"${WHICH_POD}"

# ------------------------------------------

## closing messages

pod_generic_display_finalMessage "${WHICH_POD}"
pod_generic_misc_timePod
pod_generic_display_msgColourSimple "info" "pod took: ${diff}[s]"
printf "%s\n"
