#!/usr/local/bin/bash

POD_VERSION="1.4.0"
script_name=".pod"
script_author="JRD"
script_about="launch a chosen pod with passed flags - mac version"
script_start=$(date +%s)

# ////////////////////////////////////////// DISCOVER PATHS


## [1] discover pod path and assign TARGET_FOLDER

# [1.1] discover pod path
parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; cd ..; pwd -P )
cd "${parent_path}"
pod_home_path="$(pwd)"

# [1.2] establish TARGET_FOLDER on this machine running pod (parent folder to POD_SOFTWARE)

LOCAL_TARGET_FOLDER=$(printf $parent_path | sed 's,POD_SOFTWARE.*,,')
TARGET_FOLDER="${LOCAL_TARGET_FOLDER}"


# ////////////////////////////////////////// GENERIC PREPERATION (pod_)


## [2] generic pod_ preparation

# [2.1] source generic pod_ preperation script
source pods/pod_/prepare/prepare_generic_misc.bash
# [2.2] remove any existing temp files
prepare_generic_misc_clearTheDecks
# [2.3] identify local os
prepare_generic_misc_identifyOs
# [2.4] source all generic pod_ scripts
prepare_generic_misc_sourceGeneric
# [2.5] set all generic pod_ default settings
prepare_generic_misc_setDefaults
# [2.6] change local permissions to assist later pod folder copy
chmod -R 777 ${pod_home_path}/.git
# [2.7] declare global arrays used by generic pod_ stages / functions
declare -A ifsDelimArray
declare -A pod_test_connect_error_array
declare -A pod_software_send_pid_array

# ==========

## [3] check generic pod_ dependencies

# [3.1] jq - bash jason parser - on mac uses homebrew package
jq_folder=""
jq_file_path="jq"
# [3.2] ensure third party packages are executable
chmod -R +x "${pod_home_path}/third_party"

# ==========

## [4] handle flags passed on command line

# [4.1] ensure --pod | -p flag is passed first (if not using help flag on its own)
if [[ "${1}" != "-p" ]] && [[ "${1}" != "--pod" ]] && [[ "${1}" != "-h" ]] && [[ "${1}" != "--help" ]]; then
  printf "%s\n"
  prepare_generic_display_msgColourSimple "ERROR-->" "always specify the pod flag first ${yellow}-p | --pod${red}"
  printf "%s\n"
  exit 1;
fi


# ////////////////////////////////////////// POD SPECIFIC PREPERATION (pod_XYZ)


# [4.2] use the flag handling function for the chosen pod
while test $# -gt 0; do
  case "$1" in
    -h|--help)
        if [[ ${podFlag} == "true" ]]; then
          prepare_generic_display_banner
          prepare_generic_help
          prepare_help
          prepare_generic_helpFinish
        else
          prepare_generic_display_banner
          prepare_generic_help
          prepare_generic_helpFinish
        fi
        exit 0;
        ;;
    -p|--pod)
        shift
        WHICH_POD=$1
        shift
        prepare_generic_misc_sourceThisPod
        prepare_misc_setDefaults
        prepare_generic_misc_clearTheDecks
        podFlag="true"
        ;;
    *)
      thisFlag=${1}
      flagValue=$(shift && echo $1)
      prepare_flags_handle ${thisFlag} ${flagValue}
      shift
      shift
        ;;
  esac
done

# [4.3] ensure flags have been passed correctly for this pod
# this will call the version of this function for the chosen pod
prepare_flags_rules

# ==========

## [5] handle the user specified servers json definition file

# note: a server definition file must always be specified !

# [5.1] check it is valid
servers_json_path="${pod_home_path}/servers/${SERVERS_JSON}"
lib_generic_checks_fileExists "launch-pod#5.1.1" "true" "${servers_json_path}"
catchError "launch-pod#5.1.2" "jq error on server json" "true" "false" "jq keys ${servers_json_path}"

# [5.2] check at least one server is defined
numberOfServers=$(jq keys $servers_json_path | tr '"' '\n' | grep 'server_' | wc -l)
lib_generic_checks_freeTest "launch-pod#5.2.1" "zero number of servers" "$numberOfServers" "-eq" "0"

# ==========

## [6] source the specified pod's build folder

# note: a build definition file must always be specified !

prepare_generic_misc_sourceThisPodBuild

# ==========

## [7] create tmp folder - used for configuration

# [7.1 ]create configurable temporary version of pod
prepare_generic_misc_podBuildTempFolder

# ==========

## [8] pod specific checks and call

# [8.1] test pod specific required files/folders exist
prepare_misc_checkFileFolderExist

# [8.2] source the pod's init script
source "pods/${WHICH_POD}/${WHICH_POD}.bash"

# [8.3] call the chosen pod's init function
"${WHICH_POD}"


# ////////////////////////////////////////// GENERIC POD FINISH


## [9] display generic pod_ closing messages

# [9.1] display generic final message
prepare_generic_display_finalMessage "${WHICH_POD}"

# [9.2] calculate and display script timings
lib_generic_misc_timePod
prepare_generic_display_msgColourSimple "INFO" "pod took: ${diff}[s]"
printf "%s\n"
